{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","defaultProps","aboutText","flag","TextForm","newText","_useState","useState","_useState2","Object","slicedToArray","text","setText","_useState3","_useState4","buttonText","setbuttonText","Fragment","heading","onChange","event","target","value","rows","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","filter","word","length","App","setMode","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a1e7c898.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Alert(props) {\n  return (\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        {props.alert.msg}\n    </div>\n    \n  )\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom';\n\n\nexport default function Navbar(props) {\n\n  return (\n    <nav className={`navbar navbar-expand-lg bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          {/* <Link className={`navbar-brand text-${props.mode === 'light' ? 'dark' : 'light'}`} to=\"/\">{props.title}</Link> */}\n          <a className={`navbar-brand text-${props.mode === 'light' ? 'dark' : 'light'}`} href=\"#\">{props.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n              {/* <link className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} aria-current=\"page\" to=\"/\">Home</link> */}\n                <a className={`nav-link active text-${props.mode === 'light' ? 'dark' : 'light'}`} aria-current=\"page\" href=\"#\">Home</a>\n              </li>\n              <li className=\"nav-item\">\n                {/* <Link className={`nav-link text-${props.mode === 'light' ? 'dark' : 'light'}`} to=\"/about\">{props.aboutText}</Link> */}\n                {/* <a className={`nav-link text-${props.mode === 'light' ? 'dark' : 'light'}`} href=\"/about\">{props.aboutText}</a> */}\n              </li>\n            </ul>\n            {/* <form className=\"d-flex\" role=\"search\">\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n            </form> */}\n            <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? 'Enable' : 'Disable'} Dark Mode</label>\n            </div>\n          </div>\n        </div>\n      </nav>\n  )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'TextUtils',\n    aboutText: 'About Us'\n};\n  ","import React, {useState} from 'react'\n\nlet flag = true;\nexport default function TextForm(props) {\n\n    let newText;\n    \n\n    const handleOnClick = () => {\n        // console.log(\"Entered Text : \" + text);\n        if(flag === true)\n        {\n            newText = text.toUpperCase();\n            setbuttonText('Convert To Lowercase');\n            props.showAlert('Converted to uppercase', 'success');\n        }\n        else{\n            newText = text.toLowerCase();\n            setbuttonText('Convert To Uppercase');\n            props.showAlert('Converted to lowercase', 'success');\n        }\n        flag = !flag;\n        setText(newText);\n    }\n\n    const handleOnChange = (event) => {\n        setText(event.target.value);\n    }\n\n    const handleCopyText = () => {\n        // console.log(\"going to copy defined text\")\n        navigator.clipboard.writeText(text);\n        props.showAlert('Copied to clipboard', 'success');\n    }\n\n    const handleClearText = () => {\n        // console.log(\"going to clear defined text\")\n        setText('');\n        props.showAlert('Text has been cleared', 'success');\n    }\n    \n    const [text, setText] = useState('');\n    const [buttonText, setbuttonText] = useState('Convert To Uppercase');\n\n  return (\n    <>\n    <div className='container'>\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n            <textarea className=\"form-control\" id=\"myBox\" onChange={handleOnChange} rows=\"8\" value={text}></textarea>\n        </div>\n        <button className='btn btn-primary mx-2' onClick={handleOnClick}>{buttonText}</button>\n        <button className='btn btn-primary mx-2' onClick={handleCopyText}>Copy to clipboard</button>\n        <button className='btn btn-primary mx-2' onClick={handleClearText}>Clear Text</button>\n    </div>\n    <div className='container my-2'>\n        <h3>Your Text Summary</h3>\n        <p>{text.split(' ').filter(word => word !== '').length} words and {text.length} characters</p>\n        <p>{0.008 * text.split(' ').filter(word => word !== '').length} Minutes read</p>\n    </div>\n    </>\n  )\n}\n\nTextForm.defaultProps = {\n    heading : 'Enter the Text'\n};","import React, { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  \n  const[mode, setMode] = useState('light');\n  const[alert, setAlert] = useState(null);\n  \n  const showAlert = (message, type) => {\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'dark')\n    {\n      setMode('light');\n      showAlert('Light mode has been enabled', 'success');\n    }\n    else\n    {\n      setMode('dark');\n      showAlert('Dark mode has been enabled', 'success');\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className='container my-3'>\n      {/* <Routes> */}\n        {/* <Route exact path=\"/about\" element={<About/>} /> */}\n        {/* <Route exact path=\"/\" element={<TextForm mode={mode} showAlert={showAlert}/>} /> */}\n        <TextForm mode={mode} showAlert={showAlert}/>\n      {/* </Routes> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}